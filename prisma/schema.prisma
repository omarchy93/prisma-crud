generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  firstName    String   @db.VarChar(50)
  middleName   String   @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  email        String   @unique @db.VarChar(50)
  mobile       String   @db.VarChar(15)
  password     String   @db.VarChar(32)
  intro        String   @db.VarChar(200)
  profile      String   @db.VarChar(200)
  registeredAt DateTime @default(now()) @db.Timestamp(0)
  lastLogin    DateTime @default(now()) @db.Timestamp(0)

  posts posts[]
}

model posts {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title       String   @db.VarChar(75)
  metaTitle   String   @db.VarChar(100)
  slug        String   @db.VarChar(100)
  summary     String   @db.VarChar(200)
  published   Int      @db.TinyInt
  content     String   @db.VarChar(200)
  userId      BigInt   @db.UnsignedBigInt
  user        users    @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createAt    DateTime @default(now()) @db.Timestamp(0)
  updateAt    DateTime @default(now()) @updatedAt @db.Timestamp(0)
  publishedAt DateTime @default(now()) @db.Timestamp(0)

  postComments postComments[]
  postMetas    postMetas[]

  postTags     postTags[]
  postCategory postCategory[]
}

model postComments {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title       String   @db.VarChar(100)
  content     String   @db.VarChar(200)
  published   Int      @db.TinyInt
  postId      BigInt   @db.UnsignedBigInt
  post        posts    @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createAt    DateTime @default(now()) @db.Timestamp(0)
  publishedAt DateTime @default(now()) @db.Timestamp(0)
}

model postMetas {
  id       BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  key      String   @db.VarChar(50)
  content  String   @db.VarChar(200)
  postId   BigInt   @db.UnsignedBigInt
  post     posts    @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model tags {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title     String   @db.VarChar(75)
  metaTitle String   @db.VarChar(100)
  slug      String   @db.VarChar(100)
  content   String   @db.VarChar(200)
  createAt  DateTime @default(now()) @db.Timestamp(0)
  updateAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)

  postTags postTags[]
}

model postTags {
  id       BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  postId   BigInt   @db.UnsignedBigInt
  post     posts    @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tagId    BigInt   @db.UnsignedBigInt
  tag      tags     @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model categorys {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  title        String         @db.VarChar(75)
  metaTitle    String         @db.VarChar(100)
  slug         String         @db.VarChar(100)
  content      String         @db.VarChar(200)
  createAt     DateTime       @default(now()) @db.Timestamp(0)
  updateAt     DateTime       @default(now()) @updatedAt @db.Timestamp(0)
  postCategory postCategory[]
}

model postCategory {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  postId     BigInt    @db.UnsignedBigInt
  post       posts     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId BigInt    @db.UnsignedBigInt
  category   categorys @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createAt   DateTime  @default(now()) @db.Timestamp(0)
  updateAt   DateTime  @default(now()) @updatedAt @db.Timestamp(0)
}
